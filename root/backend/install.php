<?php

include_once("include/functions.php");

if(file_exists(DBPATH)){
		die("Toboggan looks like install already installed: Db file already exists: " . DBPATH);
}

if(isset($_POST["Submit"])){

	//some pre checks
	
	if(!isset($_POST["first_username"])){
		die("username not sent");
	}
	if(!isset($_POST["first_password"])){
		die("password not sent");
	}	
	
	if(file_exists(DBPATH)){
		die("DB file already exists: " . DBFILE);
	} 
	
	if(!is_writable(DBPATH)){
		die("DB file not writable: " . DBFILE);
	}
	
	/* 
	* Create config
	* config definition
	* format: array(configName, defaultvalue, comment)
	*/
	$configItems = array(
		array("logFile", "/tmp/toboggan.log", "Log File"),
		array("logLevel", appLog_INFO, "Log Level"),
		array("sessionName", "Toboggan", "Name for the PHP session"),
		array("enable_basic_auth", false, "Enable basic auth for file streams/downloads (useful for using external players)"),		
	);
	
	//generated config
	$salt = base64_encode(str_replace('"','\"',mcrypt_create_iv(16)));
	$configItems[] = array("passwordSalt",$salt,"Salt for user passwords - autogenerated");
	
	$configStr = '<?php' . "\n";
	foreach($configItems as $c){
		$name = $c[0];
		$com = $c[2];
		$val = $c[1];			
		if (is_bool($val)){
			$val = $val?"true":"false";
		} elseif (is_numeric($val)){
			//do nothing
		} else{
			//assume string
			$val = "'".$val."'";
		}
		$configStr .= '//'. $com . "\n";
		$configStr .= "\t" . '$config["' . $name . '"] = ' . $val . ';' . "\n";
	}
	$configStr .= '?>';
	
	echo "<p>Copy the following settings into config.php in the /config/ directory</p>";
	echo "<textarea style='width:500px;height:500px'>$configStr</textarea>";

	//do install	
	/*
	* create DB
	*/
	$sqlFiles = array(
		"schema" => "db/1.template.sql",
		"init" => "db/2.init.sql"
	);
	
	//do we want default data. e.g. standard transcoders
	if($_POST["defaultData"] == "on"){
		$sqlFiles["defaultData"] = "db/3.defaultdata.sql";
	}	

	//run in the sql templates
	try {
		$conn = new PDO(PDO_DSN);
		$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);	
		//enable foreign key enforcement - not enabled by default in sqlite and must be done per connection
		$conn->exec("PRAGMA foreign_keys = ON");
		
		foreach($sqlFiles as $file){
			$sql = file_get_contents($file);
			$conn->exec($sql);
		}

		//run in custom sql
		$firstUsername = $_POST["first_username"];
		$firstPassword = $_POST["first_password"];
		//hash round 1 - client
		$firstPassword = hash("sha256",$firstPassword, true);
		//hash round 2 - server
		$firstPassword = base64_encode(hash("sha256",$salt.$firstPassword, true));
		//first user
		$sql = "INSERT INTO User(username, password, enabled) VALUES(:username, :password, 1)";
		$stmt = $conn->prepare($sql);
		$stmt->bindValue(":username",$firstUsername,PDO::PARAM_STR);
		$stmt->bindValue(":password",$firstPassword,PDO::PARAM_STR);
		$stmt->execute();
		
		//perms for first user
		$sql = "INSERT INTO UserPermission(idUser, idAction) VALUES(1,".PERMISSION_ADMINISTRATOR.");";
		$conn->query($sql);
	} catch(PDOException poe){
		die ("DB Error: " . poe.printStackTrace());
	}
		
	//clean up
	$conn = null;
	echo "<p>DB created</p>";
		
} else {


?>

<html>
<head>
</head>
<body>
	<form method="POST" action="">		
		<div>
			Setup First User:
		</div>
		<div>
			<label for="uname">Username</label>
			<input id="uname" name="first_username" />
		</div>
		<div>
			<label for="pw">Password</label>
			<input id="pw"name="first_password" type="password" />
		</div>
		<div>
			<label for="defaultData">Include useful default settings</label>
			<input id="defaultData" type="checkbox" name="defaultData" />
		</div>
		<div>
			<input type="submit" value="Install!" name="Submit" />
		</div>		
	</form>
</body>
</html>

<?php
}
?>