Ultrasonic REST API Documentation for API Version 0.5

######################################################
# API Authentication:								 #
######################################################

There are 2 methods to authenticate:
1. Form based starting s session:
	Post "username" and "password" to rest.php&action=login. The password must be a sha256 hash of the password.

2. A HTTP header can be sent with each request to authenticate in the form:

	X-US-Authorization: method userStr|passStr

	where method is US-Auth1, userStr is the username base64 encoded, and passStr is a sha256 hash of the password encoded in base64

######################################################
# API Versions :							 		 #
######################################################

Every request must include an apiver={apiversion} argument or the request will be rejected. If the version sent by the client is unsupported a 
412 Precondition failed HTTP response will be sent.

######################################################
# API Keys :								 		 #
######################################################

Access to the REST api requires an apikey. Every request must include an apikey={yourapikey} argument or the request will be rejected.

######################################################
# List of API methods exposed by the backend:		 #
######################################################

These are utilised by calling rest.php?action=methodName&arg1=val1...

listMediaSources
	args:
		none
	Returns JSON representing an array of mediaSourceIDs which are integers, and displayNames for each mediaSource. 
	These represent a list of media directories which can be accessed.
	
listDirContents
	args:
		dir - the path of the directory to get the contents of.
		mediaSourceID - the mediaSource in which the directory is located in.
	Returns JSON representing an array structured as follows:
	{
		CurrrentPath: "pathBeingListed",
		Directories:[
			"subDir1",
			"subDir2",
			...
		],
		Files:[
			{
				filename: "nameOfFile",
				displayName: "givenNameOfFileWhichShouldBeDisplayed",
				streamers: [
					{
						extension: "extension representing the format of the media stream which will be output by this streamer e.g.(mp3)",
						streamerID: "ID number of streamer",
						mediaType: "The media type which this streamer outputs",
					}
					...
				],
			},
			...
		],
	}
	
getStream
	args:
		dir - directory containing file to stream.
		filename - the filename of the file to stream.
		mediaSourceID - the ID of the mediaSource containing the dir
		streamerID - the ID of the streamer which should be used to stream the file
	Outputs a binary media stream of the file which is in dir contained by the mediaSource specified by mediaSourceID using the streamer identified by streamerID.
	
downloadFile
	args:
		dir - directory containing file to stream.
		filename - the filename of the file to stream.
		mediaSourceID - the ID of the mediaSource containing the dir
	Output the file as it is on the server
	
login
	args:
		None (see authentication section above)
	Authenticates the user and starts a session 
	Note: Only for use with form based authentication
	
logout
	args:
		none
	destroy a session created using the login method
	
saveClientSettngs
	args:
		settingsBlob - a string representing the settings to be saved
	A method to save client specific settings on the server. These are saved per user and per apikey, such that multiple of the same client can share settings
	to allow portability.
	
	retrieveClientSettings
	args:
		None
	A method to retrieve previously saved settings for the client. These are saved per user and per apikey, such that multiple of the same client can share settings
	to allow portability

retrieveClientSettings
	args:
		none
	Retrieves the settings blob previously saved by a client using the same apikey and user. If none have been saved it returns a 204 'No Content' HTTP status
	
search
	args:
		mediaSourceID - a mediaSourceID of a media source to search within or 'all' for all media sources
		dir - a directory relative to the mediaSourceID's root to confine to search to. If mediaSourceID is 'all', dir is relative to all of them.
		query - a string to match against file and directory names
	Returns a JSON object in the form:
	[
		{
			"mediaSourceID": "id"
			"results":
			[
				"dirs":
				[
					{
						"path": "path of the dir" // path relative to the mediaSource root (does not include the dirname which matched the query)
						"name": "filename" // the name of the dir which matched the query
					}
					...
				]
				"files":
				[
					{
						"path": "path of the file" // path relative to the mediaSource root (does not include the filename which matched the query)
						"fileObject": 
						{
							"filename": "nameOfFile",
							"displayName": "givenNameOfFileWhichShouldBeDisplayed",
							"streamers": [
								{
									"extension": "extension representing the format of the media stream which will be output by this streamer e.g.(mp3)",
									"streamerID": "ID number of streamer",
									"mediaType": "The media type which this streamer outputs",
								}
								...
							]
						},
					},
					...
				]
			]
		},
		...
	]
	
retrieveStreamerSettings
	args:
		None
	Retrieves a data structure representing the backend Streamer settings. These can be altered/added to 
	and sent back in the same format to the "saveStreamerSettings" action. The structure is of the form:
	[
		{
			  "fromExtensions":	"value",
			  "bitrateCmd":		"value",
			  "toExtension":	"value",
			  "MimeType":		"value",
			  "MediaType":		"value",
			  "command":		"value",
		}
		...
	]
	
saveStreamersSettings
	args:
		settings - (POST) a json string representing the streamer settings to be saved in the following form:
	[
		{
			  "fromExtensions":	"value",
			  "bitrateCmd":		"value",
			  "toExtension":	"value",
			  "MimeType":		"value",
			  "MediaType":		"value",
			  "command":		"value",
		}
		...
	]
	Saves streamer settings. The streamer settings on the server will be entirely replaced by those given here.
	
listUsers
	args:
		None
	Returns a JSON object representing the users of the system in the format:
	[
		{
			"idUser":	"theuserid",
			"username":	"theusername",
		}
		...
	]
	
retrieveUserSettings
	args:
		userid - a user id as retrieved with listUsers
	Returns a JSON object representing a user in the following format:
	[
		{
			"idUser": 			"theuserid",
			"username": 		"theusername",
			"email": 			"theemail",
			"enabled": 			"theenabled",
			"maxAudioBitrate": 	"themaxAudioBitrate (kbps)",
			"maxVideoBitrate": 	"themaxVideoBitrate (kbps)",
			"maxBandwidth": 	"themaxBandwidth (kbps)",
		}
		...
	]
	
updateUserSettings
	args:
		settings - (POST) an object representing the user's setting in the following format
			[
				{
					"username":			"theusername",
					"email":			"theemail",
					"enabled":			"theenabled",
					"maxAudioBitrate":	"themaxAudioBitrate (kbps)",
					"maxVideoBitrate":	"themaxVideoBitrate (kbps)",
					"maxBandwidth":		"themaxBandwidth (kbps)",
				}
				...
			]
		userid - a user id of the user to update as retrieved with listUsers
	Updates an existing user's settings
		
addUser
	args:
		settings - (POST) an object representing the user's setting in the following format
			[
				{
					"username":			"theusername",
					"password":			"thepassword", #base64 encoded sha256 of the password
					"email":			"theemail",
					"enabled":			"theenabled",
					"maxAudioBitrate":	"themaxAudioBitrate (kbps)",
					"maxVideoBitrate":	"themaxVideoBitrate (kbps)",
					"maxBandwidth":		"themaxBandwidth (kbps)",
				}
				...
			]
			
deleteUser
	args:
		userid - a user id of the user to delete
	Removes a user
	
changeUserPassword
	args:
		userid - (OPTIONAL) id of the user whose password should be changed. if omitted the current user's password will be changed
		password - (POST) - base64 encoded sha256 of the password
	

		